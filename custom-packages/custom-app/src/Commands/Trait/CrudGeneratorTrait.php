<?php

namespace CustomPackages\CustomApp\Commands\Trait;

use Illuminate\Filesystem\Filesystem;
use Illuminate\Support\Collection;
use Illuminate\Support\Facades\Schema;
use Illuminate\Support\Str;

trait CrudGeneratorTrait
{
    use BaseCrudGeneratorTrait;
    use BuildCrudGeneratorTrait;
    use FormCrudGenratorHelperTrait;
    use WizardGeneratorTrait;

    protected string $tableName = "";
    protected Collection|null $tableColumns = null;
    protected Collection $tableIndexes;
    protected Collection $tableForeignKeys;
    protected string $className = "";
    protected string $modelNamespace = 'App\Models';
    protected string $controllerNamespace = 'App\Http\Controllers\CraftablePro';
    protected string $requestNamespace = '';
    protected array $fillable = [];
    protected array $translatable = [];
    protected array $sortableColumns = [];
    protected string $softDeleteNamespace = "use Illuminate\Database\Eloquent\SoftDeletes;\n";
    protected string $softDelete = "use SoftDeletes;\n";
    protected bool $isSoftDelete = false;
    protected Collection $ruleList;
    protected string $indexRequestNamespace = "";
    protected string $storeRequestNamespace = "";
    protected string $updateRequestNamespace = "";
    protected string $destroyRequestNamespace = "";
    protected string $indexRequest = "";
    protected string $storeRequest = "";
    protected string $createRequest = "";
    protected string $updateRequest = "";
    protected string $editRequest = "";
    protected string $destroyRequest = "";
    protected string $migration_name = "";
    protected array $onlyTableColumns = [];
    protected string $controllerName = "";
    protected Collection|null $indexColumns = null;
    protected Collection|null $formColumns = null;
    protected array $mediaCollections = [];
    protected array $imageCollections = [];
    protected bool $withExport = false;
    protected string $exportNamespace = 'App\Exports\CraftablePro';
    protected bool $overwriteModel = true;

    protected Collection|null $relations = null;

    protected $hideColumns = [
        'email_verified_at',
        'remember_token',
        'created_at',
        'updated_at',
        'deleted_at',
    ];

    protected $ignore_tables = [
        'migrations',
        'password_resets',
        'craftable_pro_users',
        'failed_jobs',
        'personal_access_tokens',
        'craftable_pro_password_resets',
        'permissions',
        'model_has_permissions',
        'roles',
        'model_has_roles',
        'role_has_permissions',
        'language_lines',
        'settings',
        'tags',
        'taggables',
        'media',
        'unassigned_media',
        'quotes',
    ];

    public function __construct(Filesystem $files)
    {
        parent::__construct();

        $this->files = $files;
        $this->ruleList = collect([]);
        $this->indexColumns = collect([]);
        $this->formColumns = collect([]);
    }

    public function chooseTableName()
    {
        $tables = collect(Schema::getConnection()->getDoctrineSchemaManager()->listTableNames())->filter(function ($table) {
            return ! in_array($table, $this->ignore_tables);
        })->values()->all();

        return $this->components->choice("Please choose the table you would like to generate CRUD for", $tables);
    }

    /**
     * Get the desired class name from the input.
     */
    protected function setTableAndClassName(string $tableName)
    {
        $this->tableName = trim($tableName);

        $this->buildClassName();
        $this->buildTableColumns();
        $this->indexColumns = $this->tableColumns->filter(function ($column) {
            if ($this->option('listing-columns') || $this->option('wizard')) {
                return in_array($column['name'], ['created_at', 'updated_at']) || ! $column['hidden'];
            }

            return ! $column['hidden'];
        });
        $this->formColumns = $this->tableColumns->where('hidden', false)->filter(fn ($column) => $column['name'] !== 'id');
        $this->buildRequestName();

        return $this;
    }

    /**
     * Check table is exists.
     */
    protected function tableExists(): bool
    {
        return Schema::hasTable($this->tableName);
    }

    protected function checkWithExistsModel()
    {
        $modelPath = $this->getModelPath($this->className);
        if ($this->files->exists($modelPath)) {
            $file = $this->files->get($modelPath);
            if (strpos($file, "/** Auto-generated by Craftable PRO */") === false) {
                $this->overwriteModel = $this->components->choice("Existing model {$this->className} detected. Do you want to overwrite it?", ["yes", "no"], "yes") === "yes";
            }
        }

        return $this;
    }

    /**
     * Make the class name from table name.
     */
    private function buildClassName(): string
    {
        return $this->className = Str::studly(Str::singular($this->tableName));
    }

    /**
     * Build table columns.
     */
    protected function buildTableColumns()
    {
        $this->tableIndexes = collect(Schema::getConnection()->getDoctrineSchemaManager()->listTableIndexes($this->tableName));
        $this->tableForeignKeys = collect(Schema::getConnection()->getDoctrineSchemaManager()->listTableForeignKeys($this->tableName));
        $this->tableColumns = $this->getTableColumns($this->tableName);

        $this->tableColumns->each(function ($column) {
            if ($column['name'] === 'deleted_at') {
                $this->isSoftDelete = true;
            }

            if (! in_array($column['name'], $this->hideColumns)) {
                if ($column['name'] !== "id") {
                    array_push($this->fillable, "'{$column['name']}'");
                }

                array_push($this->onlyTableColumns, "{$column['name']}");
            }
        });
    }

    /**
     * Build table columns.
     */
    protected function getTableColumns(string $tableName)
    {
        return collect(Schema::getColumnListing($tableName))->map(function ($column) use ($tableName) {

            $columnType = Schema::getColumnType($tableName, $column);
            $columnRequired = boolval(Schema::getConnection()->getDoctrineColumn($tableName, $column)->getNotnull());

            return [
                'name' => $column,
                'type' => $columnType,
                'required' => $columnRequired,
                'translatable' => false,
                'publishable' => false,
                'hidden' => in_array($column, $this->hideColumns),
            ];
        })->filter();
    }

    /**
     * Build requests names and sets them up.
     *
     * @return void
     */
    private function buildRequestName(): void
    {
        $this->requestNamespace = "App\Http\Requests\CraftablePro\\" . $this->className;
        $this->createRequest = "Create" . $this->className . "Request";
        $this->storeRequest = "Store" . $this->className . "Request";
        $this->editRequest = "Edit" . $this->className . "Request";
        $this->updateRequest = "Update" . $this->className . "Request";
        $this->indexRequest = "Index" . $this->className . "Request";
        $this->destroyRequest = "Destroy" . $this->className . "Request";
        $this->bulkDestroyRequest = "BulkDestroy" . $this->className . "Request";
        $this->createRequestNamespace = "$this->requestNamespace\\$this->createRequest";
        $this->storeRequestNamespace = "$this->requestNamespace\\$this->storeRequest";
        $this->editRequestNamespace = "$this->requestNamespace\\$this->editRequest";
        $this->updateRequestNamespace = "$this->requestNamespace\\$this->updateRequest";
        $this->indexRequestNamespace = "$this->requestNamespace\\$this->indexRequest";
        $this->destroyRequestNamespace = "$this->requestNamespace\\$this->destroyRequest";
        $this->bulkDestroyRequestNamespace = "$this->requestNamespace\\$this->bulkDestroyRequest";
    }

    /**
     * Create model file.
     *
     * @return $this
     */
    protected function buildModel()
    {
        if ($this->overwriteModel) {
            $this->components->task('Model', function () {
                $modelPath = $this->getModelPath($this->className);

                $replace = $this->modelBuildReplacements();

                $template = view('brackets/custom-app::model', $replace)->render();

                $this->files->put($modelPath, $template);
            });
        } else {
            $this->components->twoColumnDetail("Model", '<fg=yellow;options=bold>SKIPPED</>');
        }

        return $this;
    }

    /**
     * Create controller file.
     *
     * @return $this
     */
    protected function buildController()
    {
        $this->controllerName = "{$this->className}Controller";

        $this->components->task($this->controllerName, function () {
            $controllerPath = $this->getControllerPath($this->controllerName);

            $replace = $this->baseBuildReplacements();

            $template = view("brackets/custom-app::controller", $replace)->render();

            $this->files->put($controllerPath, $template);
        });

        return $this;
    }

    /**
     * Create request file.
     *
     * @param string $name
     * @return $this
     */
    protected function buildRequests(string $name, string $permissionName = null)
    {
        $requestName = ucfirst($name) . "$this->className" . "Request";

        $this->components->task($requestName, function () use ($name, $permissionName, $requestName) {
            $requestPath = $this->getRequestPath($requestName);

            $replace = $this->requestBuildReplacements(
                requestClassName: $requestName,
                request: $name,
                permissionName: $permissionName ?? $name
            );

            $this->files->put($requestPath, view('brackets/custom-app::request_rule', $replace)->render());
        });

        return $this;
    }

    protected function shouldAskForOptionValue(string $optionName): bool
    {
        return (! $this->argument('table_name') || $this->option('wizard')) && ! $this->option($optionName);
    }

    /**
     * Append web route file.
     *
     * @return $this
     */
    protected function buildRoutes()
    {
        $this->components->task("Routes", function () {
            $replace = $this->routesBuildReplacements();

            $content = view('brackets/custom-app::route', $replace)->render();

            $this->appendIfNotAlreadyAppended(
                base_path('routes/web.php'),
                PHP_EOL . PHP_EOL . $content
            );
        });

        return $this;
    }

    /**
     * Create typescript file.
     *
     * @param array $replace
     * @return $this
     * @throws \Illuminate\Contracts\Filesystem\FileNotFoundException
     */
    protected function buildTypeScriptFile(array $replace)
    {
        $typeScriptPath = $this->makeDirectory(resource_path("js/custom-app/Pages/{$this->className}/types.d.ts"));
        $typeScriptFile = $this->getTypeScriptFile();

        $typeScriptContent = str_replace(
            array_keys($replace),
            array_values($replace),
            $typeScriptFile,
        );

        $this->files->put($typeScriptPath, $typeScriptContent);

        return $this;
    }

    /**
     * Create vue views.
     *
     * @return $this
     * @throws \Illuminate\Contracts\Filesystem\FileNotFoundException
     */
    protected function buildViews()
    {
        $this->components->task("Views", function () {
            $replace = $this->viewsBuildReplacements();

            collect(['Index', 'Create', 'Edit', 'Form'])->each(function ($viewName) use ($replace) {
                $this->buildCurrentView($viewName, $replace);
            });

            $this->buildTypeScriptFile($replace);
        });

        return $this;
    }

    /**
     * Create current vue view file.
     *
     * @param string $viewName
     * @param array $replace
     * @throws \Illuminate\Contracts\Filesystem\FileNotFoundException
     */
    protected function buildCurrentView(string $viewName, array $replace)
    {
        $resourcePath = $this->getResourcesPath($this->className, $viewName);

        $content = str_replace(
            array_keys($replace),
            array_values($replace),
            $this->getVueFile($viewName)
        );

        $this->files->put($resourcePath, $content);
    }

    /**
     * Create permission migration.
     *
     * @return $this
     */
    protected function buildPermissionsMigration()
    {
        $this->components->task("Migration", function () {
            $migrationPath = $this->getMigrationPath(Str::plural($this->tableName));

            $replace = $this->buildPermissionMigrationReplace();

            $template = view("brackets/custom-app::permission_migration", $replace)->render();

            $this->files->put($migrationPath, $template);
        });

        return $this;
    }

    protected function buildExport()
    {
        if ($this->withExport) {
            $this->components->task("Export", function () {
                $exportPath = $this->getExportPath(Str::plural($this->className) . "Export");
                $replace = $this->buildExportReplace();

                $template = view("brackets/custom-app::export", $replace)->render();

                $this->files->put($exportPath, $template);
            });
        }

        return $this;
    }

    protected function buildDryRun()
    {
        // TODO it has a feeling of being a consistent with the new Laravel styling, but it feels a bit confusing I think, rethink how this output should look like, low priority

        $this->getMigrationPath(Str::plural($this->tableName));

        // TODO when displaying columns in listing, add information (with different style) about if it's sortable or publishable

        $this->components->twoColumnDetail('<fg=green;options=bold>Option</>', '<fg=green;options=bold>Generated values</>');
        $this->components->twoColumnDetail('<options=bold>Model</>', $this->className);
        $this->components->twoColumnDetail('<options=bold>Controller</>', "{$this->className}Controller");
        $this->components->twoColumnDetail('<options=bold>Index request</>', $this->indexRequest);
        $this->components->twoColumnDetail('<options=bold>Store request</>', $this->storeRequest);
        $this->components->twoColumnDetail('<options=bold>Update request</>', $this->updateRequest);
        $this->components->twoColumnDetail('<options=bold>Listing columns</>');
        $this->components->bulletList($this->indexColumns->map(fn ($column) => $column['name']));
        $this->components->twoColumnDetail('<options=bold>Form columns</>');
        $this->components->bulletList($this->formColumns->map(fn ($column) => $column['name']));
        if ($this->relations !== null) {
            $this->components->twoColumnDetail('<options=bold>Relations</>');
            $this->components->bulletList($this->relations?->map(fn ($relation) => "{$relation['name']}: {$relation['type']}({$relation['model']}::class, {$relation['tableName']}, {$relation['foreignKey']}, {$relation['ownerKey']})"));
        }

        // TODO: add missing wizard steps from WizardGeneratorTrait
        // $this->components->twoColumnDetail('<options=bold>Features:</>', 'Taggable, Export');

        $this->components->twoColumnDetail('<options=bold>Permissions migration</>', $this->migration_name);
        $this->newLine();

        $this->info(
            "php artisan custom-app:generate-crud " . $this->tableName .
                " --listing-columns=" . $this->indexColumns->map(fn ($column) => $column['name'])->implode(',') .
                " --sortable-columns=" . collect($this->sortableColumns)->implode(',') .
                " --form-columns=" . $this->formColumns->map(fn ($column) => $column['name'])->implode(',') .
                ($this->option('publishable-column') !== null ? " --publishable-column= " . $this->option("publishable-column") : "") .
                ($this->option('translatable-columns') !== null ? " --translatable-columns=" . collect($this->translatable)->implode(",") : "") .
                ($this->option("media-collections") !== null ? " --media-collections=" . collect($this->mediaCollections)->implode(",") : "") .
                ($this->option("image-collections") !== null ? "--image-collections=" . $this->imageCollections : "") .
                ($this->option("add-relation") !== [] ? " --add-relation=" . collect($this->option("add-relation"))->implode(",") : "") .
                ($this->option("with-export") !== false ? " --with-export" : "") .
                ($this->option("run-migration") !== false ? " --run-migration" : "") .
                ($this->option("without-routes") !== false ? " --without-routes" : "") .
                ($this->option("without-sidebar") !== false ? " --without-sidebar" : "")
        );
    }

    protected function appendLinkInSidebar()
    {
        $this->components->task("Sidebar", function () {
            $permission = "custom-app." . Str::kebab($this->className) . ".index";
            $link = Str::kebab(Str::plural($this->className));
            $linkName = Str::headline(Str::plural($this->className));

            $sidebar = resource_path("js/custom-app/Components/Sidebar.vue");
            $file = $this->files->get($sidebar);
            $append = '<SidebarItem
                        :href="route(\'custom-app.' . $link . '.index\')"
                        :icon="CubeTransparentIcon"
                        v-can="\'' . $permission . '\'"
                    >
                        {{ $t("custom-app", "' . $linkName . '") }}
                    </SidebarItem>';

            if (! strpos($file, $append)) {
                $append .= '
                    <!--AppendGeneratorLink-->';
                $text = str_replace("<!--AppendGeneratorLink-->", $append, $file);
                $this->files->put($sidebar, $text);
            }
        });

        return $this;
    }

    protected function getDateFormatWithColumnType(string $columnType): string
    {
        switch ($columnType) {
            case "timestamp":
            case "datetime":
                return "DD.MM.YYYY HH:mm";

                break;

            case "date":
                return "DD.MM.YYYY";

                break;
            case "time":
                return "HH:mm";

                break;
            case "year":
                return "YYYY";

                break;
            default:
                return false;

                break;
        }
    }
}
