@php echo "<?php"
@endphp

/** Auto-generated by Craftable PRO */

namespace {{$modelNamespace}};

use Illuminate\Database\Eloquent\Model;
@if($isSoftDelete){{$softDeletesNamespace}}@endif
@foreach($relations->unique('type') as $relation)
use Illuminate\Database\Eloquent\Relations\{{ ucfirst($relation['type']) }};
@endforeach
@if(count($translatableColumns) > 0)use Spatie\Translatable\HasTranslations;
@endif
@if($hasMediaCollections)
use CustomPackages\CustomApp\Media\ProcessMediaTrait;
use CustomPackages\CustomApp\Media\AutoProcessMediaTrait;
use CustomPackages\CustomApp\Media\InteractsWithMedia;
use Spatie\MediaLibrary\HasMedia;
@endif
@if($hasImageCollections)
use Spatie\MediaLibrary\MediaCollections\Models\Media;
use CustomPackages\CustomApp\Media\HasMediaPreviewsTrait;
@endif

class {{$modelName}} extends Model @if($hasMediaCollections) implements HasMedia @endif
{

@if($isSoftDelete)
    {{$softDeletes}}
@endif
@if(count($translatableColumns) > 0)
    use HasTranslations;
@endif
@if($hasMediaCollections)
    use ProcessMediaTrait;
    use AutoProcessMediaTrait;
    use InteractsWithMedia;
@endif
@if($hasImageCollections)
    use HasMediaPreviewsTrait;
@endif

    protected $table = '{{$tableName}}';
    protected $fillable = [{!! $fillable !!}];
@if(count($translatableColumns) > 0)

    public $translatable = [{!! $translatable !!}];
@endif
@if($modelRelations)
{!! $modelRelations !!}
@endif
@if($hasMediaCollections)

    public function registerMediaCollections(): void
    {
@foreach($mediaCollections as $collection)
        $this->addMediaCollection('{{$collection}}');
@endforeach
    }
@endif
@if($hasImageCollections)

    public function registerMediaConversions(Media $media = null): void
    {
        $this->autoRegisterPreviews();
    }
@endif

@php
    $casts = [];

    $columns = Schema::getColumnListing($tableName);

    foreach ($columns as $column) {
        if (Schema::getColumnType($tableName, $column) === 'boolean')
        $casts[$column] = Schema::getColumnType($tableName, $column);
    }
@endphp

protected $casts = [
    @php
    $castList = [];
    foreach ($casts as $column => $value) {
        $castList[] = "'$column' => '$value' ";
    }
    echo implode(",\n", $castList);
@endphp
];
}